shape2 = (1.0 - mean) * sample_size
lines(p, dbeta(p, shape1, shape2), ylab="density", type ="l", col=3)
mean = 0.5
var = 0.2
sample_size = (mean * (1.0 - mean) / var) - 1.0
shape1 = mean * sample_size
shape2 = (1.0 - mean) * sample_size
lines(p, dbeta(p, shape1, shape2), ylab="density", type ="l", col=4)
mean = 0.5
var = 0.3
sample_size = (mean * (1.0 - mean) / var) - 1.0
shape1 = mean * sample_size
shape2 = (1.0 - mean) * sample_size
lines(p, dbeta(p, shape1, shape2), ylab="density", type ="l", col=5)
mean = 0.5
var = 0.25
sample_size = (mean * (1.0 - mean) / var) - 1.0
shape1 = mean * sample_size
shape2 = (1.0 - mean) * sample_size
lines(p, dbeta(p, shape1, shape2), ylab="density", type ="l", col=5)
mean = 0.5
var = 0.22
sample_size = (mean * (1.0 - mean) / var) - 1.0
shape1 = mean * sample_size
shape2 = (1.0 - mean) * sample_size
lines(p, dbeta(p, shape1, shape2), ylab="density", type ="l", col=5)
#from here
mean = 0.5
var = 0.01
sample_size = (mean * (1.0 - mean) / var) - 1.0
shape1 = mean * sample_size
shape2 = (1.0 - mean) * sample_size
p = seq(0,1, length=100)
plot(p, dbeta(p, shape1, shape2), ylab="density", type ="l", col=1)
mean = 0.5
var = 0.05
sample_size = (mean * (1.0 - mean) / var) - 1.0
shape1 = mean * sample_size
shape2 = (1.0 - mean) * sample_size
lines(p, dbeta(p, shape1, shape2), ylab="density", type ="l", col=2)
mean = 0.5
var = 0.1
sample_size = (mean * (1.0 - mean) / var) - 1.0
shape1 = mean * sample_size
shape2 = (1.0 - mean) * sample_size
lines(p, dbeta(p, shape1, shape2), ylab="density", type ="l", col=3)
mean = 0.5
var = 0.2
sample_size = (mean * (1.0 - mean) / var) - 1.0
shape1 = mean * sample_size
shape2 = (1.0 - mean) * sample_size
lines(p, dbeta(p, shape1, shape2), ylab="density", type ="l", col=4)
mean = 0.2
var = 0.1
sample_size = (mean * (1.0 - mean) / var) - 1.0
shape1 = mean * sample_size
shape2 = (1.0 - mean) * sample_size
lines(p, dbeta(p, shape1, shape2), ylab="density", type ="l", col=5)
mean = 0.2
var = 0.05
sample_size = (mean * (1.0 - mean) / var) - 1.0
shape1 = mean * sample_size
shape2 = (1.0 - mean) * sample_size
lines(p, dbeta(p, shape1, shape2), ylab="density", type ="l", col=5)
mean = 0.2
var = 0.02
sample_size = (mean * (1.0 - mean) / var) - 1.0
shape1 = mean * sample_size
shape2 = (1.0 - mean) * sample_size
lines(p, dbeta(p, shape1, shape2), ylab="density", type ="l", col=5)
#from here
mean = 0.5
var = 0.01
sample_size = (mean * (1.0 - mean) / var) - 1.0
shape1 = mean * sample_size
shape2 = (1.0 - mean) * sample_size
p = seq(0,1, length=100)
plot(p, dbeta(p, shape1, shape2), ylab="density", type ="l", col=1)
mean = 0.5
var = 0.05
sample_size = (mean * (1.0 - mean) / var) - 1.0
shape1 = mean * sample_size
shape2 = (1.0 - mean) * sample_size
lines(p, dbeta(p, shape1, shape2), ylab="density", type ="l", col=2)
mean = 0.5
var = 0.1
sample_size = (mean * (1.0 - mean) / var) - 1.0
shape1 = mean * sample_size
shape2 = (1.0 - mean) * sample_size
lines(p, dbeta(p, shape1, shape2), ylab="density", type ="l", col=3)
mean = 0.5
var = 0.2
sample_size = (mean * (1.0 - mean) / var) - 1.0
shape1 = mean * sample_size
shape2 = (1.0 - mean) * sample_size
lines(p, dbeta(p, shape1, shape2), ylab="density", type ="l", col=4)
mean = 0.2
var = 0.02
sample_size = (mean * (1.0 - mean) / var) - 1.0
shape1 = mean * sample_size
shape2 = (1.0 - mean) * sample_size
lines(p, dbeta(p, shape1, shape2), ylab="density", type ="l", col=5)
mean = 0.5
var = 0.01
sample_size = (mean * (1.0 - mean) / var) - 1.0
shape1 = mean * sample_size
shape2 = (1.0 - mean) * sample_size
p = seq(0,1, length=100)
plot(p, dbeta(p, shape1, shape2), ylab="density", type ="l", col=1)
mean = 0.5
var = 0.001
sample_size = (mean * (1.0 - mean) / var) - 1.0
shape1 = mean * sample_size
shape2 = (1.0 - mean) * sample_size
p = seq(0,1, length=100)
lines(p, dbeta(p, shape1, shape2), ylab="density", type ="l", col=8)
mean = 0.5
var = 0.05
sample_size = (mean * (1.0 - mean) / var) - 1.0
shape1 = mean * sample_size
shape2 = (1.0 - mean) * sample_size
lines(p, dbeta(p, shape1, shape2), ylab="density", type ="l", col=2)
mean = 0.5
var = 0.1
sample_size = (mean * (1.0 - mean) / var) - 1.0
shape1 = mean * sample_size
shape2 = (1.0 - mean) * sample_size
lines(p, dbeta(p, shape1, shape2), ylab="density", type ="l", col=3)
mean = 0.5
var = 0.2
sample_size = (mean * (1.0 - mean) / var) - 1.0
shape1 = mean * sample_size
shape2 = (1.0 - mean) * sample_size
lines(p, dbeta(p, shape1, shape2), ylab="density", type ="l", col=4)
mean = 0.2
var = 0.02
sample_size = (mean * (1.0 - mean) / var) - 1.0
shape1 = mean * sample_size
shape2 = (1.0 - mean) * sample_size
lines(p, dbeta(p, shape1, shape2), ylab="density", type ="l", col=5)
mean = 0.2
var = 0.01
sample_size = (mean * (1.0 - mean) / var) - 1.0
shape1 = mean * sample_size
shape2 = (1.0 - mean) * sample_size
lines(p, dbeta(p, shape1, shape2), ylab="density", type ="l", col=5)
mean = 0.2
var = 0.001
sample_size = (mean * (1.0 - mean) / var) - 1.0
shape1 = mean * sample_size
shape2 = (1.0 - mean) * sample_size
lines(p, dbeta(p, shape1, shape2), ylab="density", type ="l", col=5)
mean = 0.2
var = 0.15
sample_size = (mean * (1.0 - mean) / var) - 1.0
shape1 = mean * sample_size
shape2 = (1.0 - mean) * sample_size
lines(p, dbeta(p, shape1, shape2), ylab="density", type ="l", col=5)
mean = 0.2
var = 0.15
sample_size = (mean * (1.0 - mean) / var) - 1.0
shape1 = mean * sample_size
shape2 = (1.0 - mean) * sample_size
lines(p, dbeta(p, shape1, shape2), ylab="density", type ="l", col=5)
mean = 0.1
var = 0.15
sample_size = (mean * (1.0 - mean) / var) - 1.0
shape1 = mean * sample_size
shape2 = (1.0 - mean) * sample_size
lines(p, dbeta(p, shape1, shape2), ylab="density", type ="l", col=5)
mean = 0.1
var = 0.1
sample_size = (mean * (1.0 - mean) / var) - 1.0
shape1 = mean * sample_size
shape2 = (1.0 - mean) * sample_size
lines(p, dbeta(p, shape1, shape2), ylab="density", type ="l", col=5)
mean = 0.15
var = 0.1
sample_size = (mean * (1.0 - mean) / var) - 1.0
shape1 = mean * sample_size
shape2 = (1.0 - mean) * sample_size
lines(p, dbeta(p, shape1, shape2), ylab="density", type ="l", col=5)
mean = 0.15
var = 0.1
sample_size = (mean * (1.0 - mean) / var) - 1.0
shape1 = mean * sample_size
shape2 = (1.0 - mean) * sample_size
lines(p, dbeta(p, shape1, shape2), ylab="density", type ="l", col=5)
mean = 0.15
var = 0.1
sample_size = (mean * (1.0 - mean) / var) - 1.0
shape1 = mean * sample_size
shape2 = (1.0 - mean) * sample_size
lines(p, dbeta(p, shape1, shape2), ylab="density", type ="l", col=5)
#from here
mean = 0.5
var = 0.01
sample_size = (mean * (1.0 - mean) / var) - 1.0
shape1 = mean * sample_size
shape2 = (1.0 - mean) * sample_size
p = seq(0,1, length=100)
plot(p, dbeta(p, shape1, shape2), ylab="density", type ="l", col=1)
mean = 0.5
var = 0.001
sample_size = (mean * (1.0 - mean) / var) - 1.0
shape1 = mean * sample_size
shape2 = (1.0 - mean) * sample_size
p = seq(0,1, length=100)
lines(p, dbeta(p, shape1, shape2), ylab="density", type ="l", col=8)
mean = 0.5
var = 0.05
sample_size = (mean * (1.0 - mean) / var) - 1.0
shape1 = mean * sample_size
shape2 = (1.0 - mean) * sample_size
lines(p, dbeta(p, shape1, shape2), ylab="density", type ="l", col=2)
mean = 0.5
var = 0.1
sample_size = (mean * (1.0 - mean) / var) - 1.0
shape1 = mean * sample_size
shape2 = (1.0 - mean) * sample_size
lines(p, dbeta(p, shape1, shape2), ylab="density", type ="l", col=3)
mean = 0.5
var = 0.2
sample_size = (mean * (1.0 - mean) / var) - 1.0
shape1 = mean * sample_size
shape2 = (1.0 - mean) * sample_size
lines(p, dbeta(p, shape1, shape2), ylab="density", type ="l", col=4)
mean = 0.15
var = 0.1
sample_size = (mean * (1.0 - mean) / var) - 1.0
shape1 = mean * sample_size
shape2 = (1.0 - mean) * sample_size
lines(p, dbeta(p, shape1, shape2), ylab="density", type ="l", col=5)
setwd("~/Coding/C/*Simulation tools/CellCoal project/results")
setwd("~/Coding/C/*Simulation tools/CellCoal project/results")
sims<-read.csv("sims")
sims
var(ProbCalls)
var(sims$ProbCalls)
describe(sims)
summary(sims)
var(sims)
sims$ProbCalls
sims$ProbCalls
var(sims$ProbCalls)
stat.desc(sims)
library(pastecs)
install.packages("pastecs")
library(pastecs)
stat.desc(sims)
library(pastecs)
setwd("~/Coding/C/*Simulation tools/CellCoal project/results")
sims<-read.csv("sims")
summary(sims)
stat.desc(sims)
library(pastecs)
#ProbCalls ProbBadCalls
setwd("~/Coding/C/*Simulation tools/CellCoal project/")
sims<-read.csv("/results1/sims")
stat.desc(sims)
library(pastecs)
#ProbCalls ProbBadCalls
setwd("~/Coding/C/*Simulation tools/CellCoal project/")
sims1<-read.csv("/results1/sims")
stat.desc(sims1)
sims2<-read.csv("/results2/sims")
stat.desc(sims2)
sims3<-read.csv("/results3/sims")
stat.desc(sims3)
sims1<-read.csv("/results1/sims")
sims1<-read.csv("results1/sims")
library(pastecs)
#ProbCalls ProbBadCalls
setwd("~/Coding/C/*Simulation tools/CellCoal project/")
sims1<-read.csv("results1/sims")
stat.desc(sims1)
sims2<-read.csv("/results2/sims")
stat.desc(sims2)
sims3<-read.csv("/results3/sims")
stat.desc(sims3)
library(pastecs)
#ProbCalls ProbBadCalls
setwd("~/Coding/C/*Simulation tools/CellCoal project/")
sims1<-read.csv("results1/sims")
stat.desc(sims1)
sims2<-read.csv("results2/sims")
stat.desc(sims2)
sims3<-read.csv("results3/sims")
stat.desc(sims3)
barplot(sims1)
barplot(sims1$ProbBadCalls)
boxlpot(sims1$ProbBadCalls)
boxplot(sims1$ProbBadCalls)
boxplot(sims1$ProbBadCalls, sims2$ProbBadCalls, )
boxplot(sims1$ProbBadCalls, sims2$ProbBadCalls, sims3$ProbBadCalls)
geom_boxplot(sims1$ProbBadCalls, sims2$ProbBadCalls, sims3$ProbBadCalls)
library(ggplot2)
geom_boxplot(sims1$ProbBadCalls, sims2$ProbBadCalls, sims3$ProbBadCalls)
aes()
geom_boxplot(sims1$ProbBadCalls, sims2$ProbBadCalls, sims3$ProbBadCalls)
data <- data.frame(sims1$ProbBadCalls, sims2$ProbBadCalls, sims3$ProbBadCalls)
p <- ggplot(data, aes(x=value, class))
p + geom_boxplot()
data <- data.frame(sims1$ProbBadCalls, sims2$ProbBadCalls, sims3$ProbBadCalls)
data
setwd("~/Coding/C/*Simulation tools/CellCoal project/")
sims1<-read.csv("results1/sims", header=TRUE)
stat.desc(sims1)
sims2<-read.csv("results2/sims", header=TRUE)
stat.desc(sims2)
sims3<-read.csv("results3/sims", header=TRUE)
stat.desc(sims3)
boxplot(sims1$ProbBadCalls, sims2$ProbBadCalls, sims3$ProbBadCalls)
data <- data.frame(sims1$ProbBadCalls, sims2$ProbBadCalls, sims3$ProbBadCalls)
p <- ggplot(data, aes(x=class, class))
p + geom_boxplot()
data <- data.frame(sims1$ProbBadCalls, sims2$ProbBadCalls, sims3$ProbBadCalls)
p <- ggplot(data = x, aes(x = variable, y = value))
p + geom_boxplot()
data <- data.frame(sims1$ProbBadCalls, sims2$ProbBadCalls, sims3$ProbBadCalls)
data
data <- data.frame(sims1$ProbBadCalls, sims2$ProbBadCalls, sims3$ProbBadCalls)
p <- ggplot(data = data, aes(x = variable, y = value))
p + geom_boxplot()
dataf <- data.frame(sims1$ProbBadCalls, sims2$ProbBadCalls, sims3$ProbBadCalls)
p <- ggplot(data = dataf, aes(x = variable, y = value))
p + geom_boxplot()
dataf <- data.frame(sims1$ProbBadCalls, sims2$ProbBadCalls, sims3$ProbBadCalls)
p <- ggplot(data = dataf, aes(x = variable, y = factor(group)))
p + geom_boxplot()
p <- ggplot(data = mydata, aes(x = factor(group), y = value))
p + geom_boxplot()
mydata <- data.frame(sims1$ProbBadCalls, sims2$ProbBadCalls, sims3$ProbBadCalls)
p <- ggplot(data = mydata, aes(x = factor(group), y = value))
p + geom_boxplot()
boxplot(mydata)
ggplot(mydata)
p<-ggplot(mydata)
p + geom_boxplot()
p <- ggplot(data = mydata, aes(x = "", y = value))
p + geom_boxplot()
p <- ggplot(data = mydata, aes(x = "", y = ""))
p + geom_boxplot()
a = data.frame(group = "v1", value = sims1)
b = data.frame(group = "v2", value = sims2))
plot.data = rbind(a, b) # this function will bind or join the rows. See data at bottom.
ggplot(plot.data, aes(x=group, y=value, fill=group)) +  # This is the plot function
geom_boxplot()      # This is the geom for box plot in ggplot.
a = data.frame(group = "v1", value = sims1)
b = data.frame(group = "v2", value = sims2)
plot.data = rbind(a, b) # this function will bind or join the rows. See data at bottom.
ggplot(plot.data, aes(x=group, y=value, fill=group)) +  # This is the plot function
geom_boxplot()      # This is the geom for box plot in ggplot.
a = data.frame(group = "v1", value = sims1$ProbBadCalls)
b = data.frame(group = "v2", value = sims2$ProbBadCalls)
plot.data = rbind(a, b) # this function will bind or join the rows. See data at bottom.
ggplot(plot.data, aes(x=group, y=value, fill=group)) +  # This is the plot function
geom_boxplot()      # This is the geom for box plot in ggplot.
a = data.frame(group = "v1", value = sims1$ProbBadCalls)
b = data.frame(group = "v2", value = sims2$ProbBadCalls)
plot.data = rbind(a, b) # this function will bind or join the rows. See data at bottom.
ggplot(plot.data, aes(x=group, y=value, fill=group)) +  # This is the plot function
geom_boxplot()      # This is the geom for box plot in ggplot.
p + geom_jitter(shape=16, position=position_jitter(0.2))
a = data.frame(group = "v1", value = sims1$ProbBadCalls)
b = data.frame(group = "v2", value = sims2$ProbBadCalls)
plot.data = rbind(a, b) # this function will bind or join the rows. See data at bottom.
p<-ggplot(plot.data, aes(x=group, y=value, fill=group))
p + geom_boxplot()
p + geom_jitter(shape=16, position=position_jitter(0.2))
a = data.frame(group = "v1", value = sims1$ProbBadCalls)
b = data.frame(group = "v2", value = sims2$ProbBadCalls)
plot.data = rbind(a, b) # this function will bind or join the rows. See data at bottom.
p<-ggplot(plot.data, aes(x=group, y=value, fill=group))
p + geom_boxplot()
p<-ggplot(plot.data, aes(x=group, y=value, fill=group))
p + geom_boxplot()
p + geom <- jitter()
p<-ggplot(plot.data, aes(x=group, y=value, fill=group))
p + geom_boxplot()
p + geom_jitter()
#p + geom_jitter(shape=16, position=position_jitter(0.2))
a = data.frame(group = "v1", value = sims1$ProbBadCalls)
b = data.frame(group = "v2", value = sims2$ProbBadCalls)
plot.data = rbind(a, b) # this function will bind or join the rows. See data at bottom.
p<-ggplot(plot.data, aes(x=group, y=value, fill=group), geom=c("boxplot", "jitter"))
a = data.frame(group = "v1", value = sims1$ProbBadCalls)
b = data.frame(group = "v2", value = sims2$ProbBadCalls)
plot.data = rbind(a, b) # this function will bind or join the rows. See data at bottom.
p<-ggplot(plot.data, aes(x=group, y=value, fill=group), geom=c("boxplot", "jitter"))
a = data.frame(group = "v1", value = sims1$ProbBadCalls)
b = data.frame(group = "v2", value = sims2$ProbBadCalls)
plot.data = rbind(a, b) # this function will bind or join the rows. See data at bottom.
p<-qplot(plot.data, aes(x=group, y=value, fill=group), geom=c("boxplot", "jitter"))
a = data.frame(group = "v1", value = sims1$ProbBadCalls)
b = data.frame(group = "v2", value = sims2$ProbBadCalls)
plot.data = rbind(a, b) # this function will bind or join the rows. See data at bottom.
qplot(plot.data, aes(x=group, y=value, fill=group), geom=c("boxplot", "jitter"))
a = data.frame(group = "v1", value = sims1$ProbBadCalls)
b = data.frame(group = "v2", value = sims2$ProbBadCalls)
plot.data = rbind(a, b) # this function will bind or join the rows. See data at bottom.
p<-qplot(plot.data, aes(x=group, y=value, fill=group), geom=c("boxplot", "jitter"))
p
a = data.frame(group = "v1", value = sims1$ProbBadCalls)
b = data.frame(group = "v2", value = sims2$ProbBadCalls)
plot.data = rbind(a, b) # this function will bind or join the rows. See data at bottom.
p<-ggplot(plot.data, aes(x=group, y=value, fill=group))
p + geom_boxplot()
ggplot( aes(x=group, y=value, fill=group)) +
geom_boxplot() +
scale_fill_viridis(discrete = TRUE, alpha=0.6) +
geom_jitter(color="black", size=0.4, alpha=0.9) +
theme_ipsum() +
theme(
legend.position="none",
plot.title = element_text(size=11)
) +
ggtitle("A boxplot with jitter") +
xlab("")
data %>%
ggplot( aes(x=group, y=value, fill=group)) +
geom_boxplot() +
scale_fill_viridis(discrete = TRUE, alpha=0.6) +
geom_jitter(color="black", size=0.4, alpha=0.9) +
theme_ipsum() +
theme(
legend.position="none",
plot.title = element_text(size=11)
) +
ggtitle("A boxplot with jitter") +
xlab("")
data ->
ggplot( aes(x=group, y=value, fill=group)) +
geom_boxplot() +
scale_fill_viridis(discrete = TRUE, alpha=0.6) +
geom_jitter(color="black", size=0.4, alpha=0.9) +
theme_ipsum() +
theme(
legend.position="none",
plot.title = element_text(size=11)
) +
ggtitle("A boxplot with jitter") +
xlab("")
ggplot(plot.data, aes(x=group, y=value, fill=group)) +
geom_boxplot() +
scale_fill_viridis(discrete = TRUE, alpha=0.6) +
geom_jitter(color="black", size=0.4, alpha=0.9) +
theme_ipsum() +
theme(
legend.position="none",
plot.title = element_text(size=11)
) +
ggtitle("A boxplot with jitter") +
xlab("")
# Plot
# Libraries
library(tidyverse)
library(hrbrthemes)
library(viridis)
ggplot(plot.data, aes(x=group, y=value, fill=group)) +
geom_boxplot() +
scale_fill_viridis(discrete = TRUE, alpha=0.6) +
geom_jitter(color="black", size=0.4, alpha=0.9) +
theme_ipsum() +
theme(
legend.position="none",
plot.title = element_text(size=11)
) +
ggtitle("A boxplot with jitter") +
xlab("")
install.packages(c("tidyverse", "hrbrthemes", "viridis"))
install.packages(c("tidyverse", "hrbrthemes", "viridis"))
install.packages(c("tidyverse", "hrbrthemes", "viridis"))
install.packages(c("tidyverse", "hrbrthemes", "viridis"))
#Analyze CellPhy simulations
library(pastecs)
library(ggplot2)
#ProbCalls ProbBadCalls
setwd("~/Coding/C/*Simulation tools/CellCoal project/")
sims1<-read.csv("results1/sims", header=TRUE)
stat.desc(sims1)
sims2<-read.csv("results2/sims", header=TRUE)
stat.desc(sims2)
sims3<-read.csv("results3/sims", header=TRUE)
stat.desc(sims3)
boxplot(sims1$ProbBadCalls, sims2$ProbBadCalls, sims3$ProbBadCalls)
mydata <- data.frame(sims1$ProbBadCalls, sims2$ProbBadCalls, sims3$ProbBadCalls)
boxplot(mydata)
p <- ggplot(data = mydata, aes(x = "", y = ""))
p + geom_boxplot()
a = data.frame(group = "v1", value = sims1$ProbBadCalls)
b = data.frame(group = "v2", value = sims2$ProbBadCalls)
plot.data = rbind(a, b) # this function will bind or join the rows. See data at bottom.
p<-ggplot(plot.data, aes(x=group, y=value, fill=group))
p + geom_boxplot()
# Plot
# Libraries
library(tidyverse)
library(hrbrthemes)
library(viridis)
ggplot(plot.data, aes(x=group, y=value, fill=group)) +
geom_boxplot() +
scale_fill_viridis(discrete = TRUE, alpha=0.6) +
geom_jitter(color="black", size=0.4, alpha=0.9) +
theme_ipsum() +
theme(
legend.position="none",
plot.title = element_text(size=11)
) +
ggtitle("A boxplot with jitter") +
xlab("")
library(ggplot2)
